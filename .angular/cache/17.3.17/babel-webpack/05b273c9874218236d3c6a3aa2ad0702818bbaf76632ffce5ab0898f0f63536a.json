{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/forms\";\nexport let PercentagemDirective = /*#__PURE__*/(() => {\n  class PercentagemDirective {\n    constructor(ngControl, elementRef) {\n      this.ngControl = ngControl;\n      this.elementRef = elementRef;\n    }\n    ngOnInit() {\n      this.subscription = this.ngControl.valueChanges?.subscribe(valor => {\n        if (valor !== null && valor !== undefined && valor !== '') {\n          this.formataValorPercentual();\n        }\n      });\n    }\n    ngOnDestroy() {\n      this.subscription?.unsubscribe();\n    }\n    formataValorPercentual() {\n      const input = this.elementRef.nativeElement;\n      if (!input) return;\n      const valorPercentual = this.ngControl.value;\n      if (typeof valorPercentual === 'string') {\n        const n = parseFloat(valorPercentual.replace(',', '.'));\n        if (!Number.isNaN(n) && n > 100) {\n          this.ngControl.control?.setValue('100', {\n            emitEvent: false\n          });\n          input.value = '100%';\n          return;\n        }\n        if (!valorPercentual.includes('%')) {\n          const v = valorPercentual.replace('.', ',') + '%';\n          input.value = v;\n        }\n        return;\n      }\n      if (typeof valorPercentual === 'number') {\n        const n = Math.min(valorPercentual, 100);\n        const v = n.toString().replace('.', ',') + '%';\n        input.value = v;\n      }\n    }\n    onInput(event) {\n      const input = event.target;\n      let rawValue = input.value;\n      rawValue = rawValue.replace('%', '').trim();\n      rawValue = rawValue.replace(/[^0-9,]/g, '');\n      const numericValue = rawValue.replace(',', '.');\n      const n = parseFloat(numericValue);\n      if (!Number.isNaN(n) && n > 100) {\n        this.ngControl.control?.setValue('100');\n        input.value = '100%';\n        return;\n      }\n      this.ngControl.control?.setValue(numericValue);\n      this.formataValorPercentual();\n    }\n    /**\n     * Move o cursor para a esquerda quando o usuário pressiona a tecla Backspace evitando bugs ao editar o valor do percentual\n     * @param event Evento de teclado\n     */\n    onKeyDown(event) {\n      const input = event.target;\n      if (event.key === 'Backspace' && input.selectionStart === input.value.length) {\n        const novaPosicao = input.value.length - 1;\n        if (novaPosicao >= 0) {\n          input.setSelectionRange(novaPosicao, novaPosicao);\n        }\n      }\n    }\n    onBlur(event) {\n      const input = event.target;\n      if (input.value === '%') {\n        this.ngControl.control?.setValue('');\n        input.value = '';\n      }\n    }\n    static {\n      this.ɵfac = function PercentagemDirective_Factory(t) {\n        return new (t || PercentagemDirective)(i0.ɵɵdirectiveInject(i1.NgControl), i0.ɵɵdirectiveInject(i0.ElementRef));\n      };\n    }\n    static {\n      this.ɵdir = /*@__PURE__*/i0.ɵɵdefineDirective({\n        type: PercentagemDirective,\n        selectors: [[\"\", \"appPercentagem\", \"\"]],\n        hostBindings: function PercentagemDirective_HostBindings(rf, ctx) {\n          if (rf & 1) {\n            i0.ɵɵlistener(\"input\", function PercentagemDirective_input_HostBindingHandler($event) {\n              return ctx.onInput($event);\n            })(\"keydown\", function PercentagemDirective_keydown_HostBindingHandler($event) {\n              return ctx.onKeyDown($event);\n            })(\"blur\", function PercentagemDirective_blur_HostBindingHandler($event) {\n              return ctx.onBlur($event);\n            });\n          }\n        },\n        standalone: true\n      });\n    }\n  }\n  return PercentagemDirective;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}